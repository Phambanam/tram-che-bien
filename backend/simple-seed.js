const mongoose = require('mongoose')
require('dotenv').config()

console.log('üå± Creating Military Logistics Database...')

async function connect() {
  try {
    const uri = process.env.MONGODB_URI || 'mongodb://localhost:27017/military-logistics'
    await mongoose.connect(uri)
    console.log('‚úÖ Connected to MongoDB')
    return true
  } catch (error) {
    console.error('‚ùå Connection error:', error)
    return false
  }
}

// Simple schemas
const UserSchema = new mongoose.Schema({
  name: String,
  email: { type: String, unique: true },
  password: String,
  role: String,
  rank: String,
  position: String,
  contact: String
}, { timestamps: true })

const UnitSchema = new mongoose.Schema({
  name: String,
  code: String,
  personnel: Number,
  commander: String,
  contact: String
}, { timestamps: true })

const LTTPItemSchema = new mongoose.Schema({
  name: String,
  category: String,
  unit: String,
  unitPrice: Number,
  description: String,
  createdBy: mongoose.Schema.Types.ObjectId
}, { timestamps: true })

const ProcessingSchema = new mongoose.Schema({}, { strict: false })

// Models
const User = mongoose.model('User', UserSchema)
const Unit = mongoose.model('Unit', UnitSchema)  
const LTTPItem = mongoose.model('LTTPItem', LTTPItemSchema)
const TofuProcessing = mongoose.model('TofuProcessing', ProcessingSchema)
const SaltProcessing = mongoose.model('SaltProcessing', ProcessingSchema)

async function seedData() {
  try {
    // Clear existing data
    await User.deleteMany({})
    await Unit.deleteMany({})
    await LTTPItem.deleteMany({})
    await TofuProcessing.deleteMany({})
    await SaltProcessing.deleteMany({})
    
    console.log('üóëÔ∏è  Cleared existing data')
    
    // Create users
    const users = await User.insertMany([
      {
        name: "Admin User",
        email: "admin@military.gov.vn",
        password: "$2b$10$kQZc5yFqVhHjGGhRtqTNEODMGwqOPkzJjJ5wKpFhNVxYtQwER7uNK", // admin123
        role: "admin",
        rank: "Thi·∫øu t√°",
        position: "Tr∆∞·ªüng ph√≤ng",
        contact: "0901111111"
      },
      {
        name: "Manager User", 
        email: "manager@military.gov.vn",
        password: "$2b$10$kQZc5yFqVhHjGGhRtqTNEODMGwqOPkzJjJ5wKpFhNVxYtQwER7uNK", // admin123
        role: "stationManager",
        rank: "ƒê·∫°i √∫y",
        position: "Qu·∫£n l√Ω tr·∫°m",
        contact: "0902222222"
      }
    ])
    
    console.log(`üë• Created ${users.length} users`)
    
    // Create units
    const units = await Unit.insertMany([
      { name: "Ti·ªÉu ƒëo√†n 1", code: "TD1", personnel: 150, commander: "ƒê·∫°i √∫y A", contact: "0901234567" },
      { name: "Ti·ªÉu ƒëo√†n 2", code: "TD2", personnel: 135, commander: "ƒê·∫°i √∫y B", contact: "0901234568" },
      { name: "Ti·ªÉu ƒëo√†n 3", code: "TD3", personnel: 140, commander: "ƒê·∫°i √∫y C", contact: "0901234569" },
      { name: "L·ªØ ƒëo√†n b·ªô", code: "LDH", personnel: 45, commander: "Thi·∫øu √∫y D", contact: "0901234570" }
    ])
    
    console.log(`üè¢ Created ${units.length} units`)
    
    // Create LTTP items
    const lttpItems = await LTTPItem.insertMany([
      { name: "G·∫°o t·∫ª lo·∫°i 1", category: "Th·ª±c ph·∫©m", unit: "Kg", unitPrice: 22000, description: "G·∫°o t·∫ª ch·∫•t l∆∞·ª£ng cao", createdBy: users[0]._id },
      { name: "Th·ªãt heo n·∫°c", category: "Th·ª±c ph·∫©m", unit: "Kg", unitPrice: 180000, description: "Th·ªãt heo n·∫°c t∆∞∆°i", createdBy: users[0]._id },
      { name: "Th·ªãt g√† ta", category: "Th·ª±c ph·∫©m", unit: "Kg", unitPrice: 120000, description: "Th·ªãt g√† ta t∆∞∆°i", createdBy: users[0]._id },
      { name: "C√° tra fillet", category: "Th·ª±c ph·∫©m", unit: "Kg", unitPrice: 85000, description: "C√° tra fillet t∆∞∆°i", createdBy: users[0]._id },
      { name: "Tr·ª©ng g√† t∆∞∆°i", category: "Th·ª±c ph·∫©m", unit: "Kg", unitPrice: 35000, description: "Tr·ª©ng g√† t∆∞∆°i", createdBy: users[0]._id },
      { name: "C√† chua", category: "Rau c·ªß qu·∫£", unit: "Kg", unitPrice: 25000, description: "C√† chua t∆∞∆°i", createdBy: users[0]._id },
      { name: "Rau c·∫£i ng·ªçt", category: "Rau c·ªß qu·∫£", unit: "Kg", unitPrice: 18000, description: "Rau c·∫£i ng·ªçt t∆∞∆°i", createdBy: users[0]._id },
      { name: "B·∫Øp c·∫£i", category: "Rau c·ªß qu·∫£", unit: "Kg", unitPrice: 12000, description: "B·∫Øp c·∫£i t∆∞∆°i", createdBy: users[0]._id },
      { name: "Mu·ªëi tinh", category: "Gia v·ªã", unit: "Kg", unitPrice: 8000, description: "Mu·ªëi tinh khi·∫øt", createdBy: users[0]._id },
      { name: "ƒê∆∞·ªùng c√°t tr·∫Øng", category: "Gia v·ªã", unit: "Kg", unitPrice: 22000, description: "ƒê∆∞·ªùng c√°t tr·∫Øng", createdBy: users[0]._id },
      { name: "N∆∞·ªõc m·∫Øm", category: "Gia v·ªã", unit: "L√≠t", unitPrice: 35000, description: "N∆∞·ªõc m·∫Øm truy·ªÅn th·ªëng", createdBy: users[0]._id },
      { name: "D·∫ßu ƒÉn", category: "Gia v·ªã", unit: "L√≠t", unitPrice: 48000, description: "D·∫ßu ƒÉn th·ª±c v·∫≠t", createdBy: users[0]._id },
      { name: "ƒê·∫≠u n√†nh kh√¥", category: "Th·ª±c ph·∫©m", unit: "Kg", unitPrice: 28000, description: "ƒê·∫≠u n√†nh kh√¥ l√†m ƒë·∫≠u ph·ª•", createdBy: users[0]._id },
      { name: "Gas LPG", category: "Ch·∫•t ƒë·ªët", unit: "Kg", unitPrice: 28000, description: "Gas n·∫•u ƒÉn", createdBy: users[0]._id }
    ])
    
    console.log(`üì¶ Created ${lttpItems.length} LTTP items`)
    
    // Create processing data for last 30 days
    const today = new Date()
    const tofuData = []
    const saltData = []
    
    for (let i = 29; i >= 0; i--) {
      const date = new Date(today)
      date.setDate(date.getDate() - i)
      
      // Tofu processing
      const soybeansInput = 30 + Math.floor(Math.random() * 40)
      const tofuOutput = Math.floor(soybeansInput * 0.3)
      
      tofuData.push({
        date,
        input: {
          soybeans: {
            quantity: soybeansInput,
            quality: 'T·ªët',
            price: 28000,
            carryOverFromPreviousDay: i === 29 ? 0 : Math.floor(Math.random() * 10)
          }
        },
        output: {
          tofu: {
            quantity: tofuOutput,
            quality: 'T·ªët',
            pricePerKg: 35000
          }
        },
        remaining: {
          soybeans: Math.floor(Math.random() * 15),
          tofu: Math.floor(Math.random() * 8)
        },
        financial: {
          totalInputCost: soybeansInput * 28000,
          totalOutputValue: tofuOutput * 35000,
          profit: (tofuOutput * 35000) - (soybeansInput * 28000),
          profitMargin: ((tofuOutput * 35000) - (soybeansInput * 28000)) / (soybeansInput * 28000) * 100
        },
        notes: `S·∫£n xu·∫•t ƒë·∫≠u ph·ª• ng√†y ${date.toLocaleDateString('vi-VN')}`
      })
      
      // Salt processing  
      const cabbageInput = 20 + Math.floor(Math.random() * 30)
      const pickledOutput = Math.floor(cabbageInput * 0.7)
      
      saltData.push({
        date,
        input: {
          cabbage: {
            quantity: cabbageInput,
            quality: 'T·ªët',
            price: 12000,
            carryOverFromPreviousDay: i === 29 ? 0 : Math.floor(Math.random() * 8)
          }
        },
        output: {
          pickledCabbage: {
            quantity: pickledOutput,
            quality: 'T·ªët',
            pricePerKg: 15000
          }
        },
        remaining: {
          cabbage: Math.floor(Math.random() * 10),
          pickledCabbage: Math.floor(Math.random() * 6)
        },
        financial: {
          totalInputCost: cabbageInput * 12000,
          totalOutputValue: pickledOutput * 15000,
          profit: (pickledOutput * 15000) - (cabbageInput * 12000),
          profitMargin: ((pickledOutput * 15000) - (cabbageInput * 12000)) / (cabbageInput * 12000) * 100
        },
        notes: `∆Ø·ªõp mu·ªëi rau c·∫£i ng√†y ${date.toLocaleDateString('vi-VN')}`
      })
    }
    
    await TofuProcessing.insertMany(tofuData)
    await SaltProcessing.insertMany(saltData)
    
    console.log(`ü•õ Created ${tofuData.length} tofu processing records`)
    console.log(`üßÇ Created ${saltData.length} salt processing records`)
    
    console.log('\nüéâ Database seeding completed!')
    console.log('\nüìä Summary:')
    console.log(`üë• Users: ${users.length}`)
    console.log(`üè¢ Units: ${units.length}`)
    console.log(`üì¶ LTTP Items: ${lttpItems.length}`)
    console.log(`üè≠ Processing Records: ${tofuData.length + saltData.length}`)
    
    console.log('\nüîê Login Credentials:')
    console.log('üìß Admin: admin@military.gov.vn / admin123')
    console.log('üìß Manager: manager@military.gov.vn / admin123')
    
    console.log('\n‚ú® Your database is ready!')
    
  } catch (error) {
    console.error('‚ùå Error seeding data:', error)
  }
}

async function main() {
  const connected = await connect()
  if (!connected) {
    process.exit(1)
  }
  
  await seedData()
  
  await mongoose.connection.close()
  console.log('üì¥ Database connection closed')
}

main() 