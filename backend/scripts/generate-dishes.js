const { MongoClient } = require('mongodb');
require('dotenv').config();

// Sample data for generating dishes
const dishTypes = [
  'Canh', 'S√∫p', 'Th·ªãt', 'C√°', 'G√†', 'Rau', 'ƒê·∫≠u', 'N·∫•m', 
  'B√°nh', 'Ch·∫£', 'Nem', 'G·ªèi', 'N·ªôm', 'X√¥i', 'Ch√°o', 'Ph·ªü',
  'B√∫n', 'Mi·∫øn', 'M√¨', 'C∆°m', 'Kho', 'Rang', 'X√†o', 'Lu·ªôc',
  'N∆∞·ªõng', 'Chi√™n', 'H·∫•p', 'N·∫•u', 'Rim', 'N·ªôm'
];

const mainIngredients = [
  { id: 'lttp001', name: 'Th·ªãt l·ª£n', category: 'Th·ªãt' },
  { id: 'lttp002', name: 'Th·ªãt b√≤', category: 'Th·ªãt' },
  { id: 'lttp003', name: 'G√† ta', category: 'Th·ªãt' },
  { id: 'lttp004', name: 'C√° thu', category: 'Th·ªßy s·∫£n' },
  { id: 'lttp005', name: 'C√° ng·ª´', category: 'Th·ªßy s·∫£n' },
  { id: 'lttp006', name: 'T√¥m', category: 'Th·ªßy s·∫£n' },
  { id: 'lttp007', name: 'Cua', category: 'Th·ªßy s·∫£n' },
  { id: 'lttp008', name: 'Rau c·∫£i', category: 'Rau c·ªß' },
  { id: 'lttp009', name: 'C√† chua', category: 'Rau c·ªß' },
  { id: 'lttp010', name: 'B·∫Øp c·∫£i', category: 'Rau c·ªß' },
  { id: 'lttp011', name: 'ƒê·∫≠u ph·ª•', category: 'ƒê·∫≠u' },
  { id: 'lttp012', name: 'ƒê·∫≠u xanh', category: 'ƒê·∫≠u' },
  { id: 'lttp013', name: 'ƒê·∫≠u ƒëen', category: 'ƒê·∫≠u' },
  { id: 'lttp014', name: 'N·∫•m h∆∞∆°ng', category: 'N·∫•m' },
  { id: 'lttp015', name: 'N·∫•m r∆°m', category: 'N·∫•m' },
  { id: 'lttp016', name: 'Khoai t√¢y', category: 'C·ªß qu·∫£' },
  { id: 'lttp017', name: 'Khoai lang', category: 'C·ªß qu·∫£' },
  { id: 'lttp018', name: 'B√≠ ƒë·ªè', category: 'C·ªß qu·∫£' },
  { id: 'lttp019', name: 'M∆∞·ªõp', category: 'Rau c·ªß' },
  { id: 'lttp020', name: 'D∆∞a chua', category: 'Rau c·ªß' }
];

const secondaryIngredients = [
  { id: 'lttp021', name: 'H√†nh t√¢y', category: 'Gia v·ªã' },
  { id: 'lttp022', name: 'T·ªèi', category: 'Gia v·ªã' },
  { id: 'lttp023', name: 'G·ª´ng', category: 'Gia v·ªã' },
  { id: 'lttp024', name: 'N∆∞·ªõc m·∫Øm', category: 'Gia v·ªã' },
  { id: 'lttp025', name: 'ƒê∆∞·ªùng', category: 'Gia v·ªã' },
  { id: 'lttp026', name: 'Mu·ªëi', category: 'Gia v·ªã' },
  { id: 'lttp027', name: 'Ti√™u', category: 'Gia v·ªã' },
  { id: 'lttp028', name: 'D·∫ßu ƒÉn', category: 'Gia v·ªã' },
  { id: 'lttp029', name: 'B·ªôt ng·ªçt', category: 'Gia v·ªã' },
  { id: 'lttp030', name: 'H·∫°t n√™m', category: 'Gia v·ªã' }
];

const difficulties = ['easy', 'medium', 'hard'];
const categories = ['M√≥n ch√≠nh', 'M√≥n ph·ª•', 'Canh', 'S√∫p', 'M√≥n tr√°ng mi·ªáng', 'M√≥n ƒÉn s√°ng'];

function getRandomElement(array) {
  return array[Math.floor(Math.random() * array.length)];
}

function getRandomNumber(min, max) {
  return Math.floor(Math.random() * (max - min + 1)) + min;
}

function generateDishName() {
  const type = getRandomElement(dishTypes);
  const main = getRandomElement(mainIngredients);
  const adjectives = ['ngon', 'ƒë·∫≠m ƒë√†', 'th∆°m', 'cay', 'ng·ªçt', 'chua', 'ƒë·∫∑c bi·ªát', 'truy·ªÅn th·ªëng', 'hi·ªán ƒë·∫°i', 'gia ƒë√¨nh'];
  
  const patterns = [
    `${type} ${main.name}`,
    `${main.name} ${type}`,
    `${type} ${main.name} ${getRandomElement(adjectives)}`,
    `${main.name} ${getRandomElement(adjectives)}`,
    `${type} ${main.name} ki·ªÉu ${getRandomElement(['B·∫Øc', 'Trung', 'Nam'])}`,
    `${main.name} ${type} ${getRandomElement(['c·ªï truy·ªÅn', 'hi·ªán ƒë·∫°i', 'gia ƒë√¨nh'])}`
  ];
  
  return getRandomElement(patterns);
}

function generateIngredients() {
  const numIngredients = getRandomNumber(3, 8);
  const ingredients = [];
  const usedIngredients = new Set();
  
  // Always add main ingredient
  const mainIngredient = getRandomElement(mainIngredients);
  ingredients.push({
    lttpId: mainIngredient.id,
    lttpName: mainIngredient.name,
    quantity: getRandomNumber(200, 1000),
    unit: 'gram',
    notes: ''
  });
  usedIngredients.add(mainIngredient.id);
  
  // Add secondary ingredients
  for (let i = 1; i < numIngredients; i++) {
    let ingredient;
    do {
      ingredient = getRandomElement([...mainIngredients, ...secondaryIngredients]);
    } while (usedIngredients.has(ingredient.id));
    
    usedIngredients.add(ingredient.id);
    
    const units = ['gram', 'ml', 'mu·ªóng canh', 'mu·ªóng c√† ph√™', 'c·ªß', 'tr√°i', 'l√°'];
    let quantity, unit;
    
    if (ingredient.category === 'Gia v·ªã') {
      quantity = getRandomNumber(1, 50);
      unit = getRandomElement(['gram', 'ml', 'mu·ªóng canh', 'mu·ªóng c√† ph√™']);
    } else {
      quantity = getRandomNumber(100, 500);
      unit = getRandomElement(['gram', 'c·ªß', 'tr√°i']);
    }
    
    ingredients.push({
      lttpId: ingredient.id,
      lttpName: ingredient.name,
      quantity: quantity,
      unit: unit,
      notes: ''
    });
  }
  
  return ingredients;
}

function generateDescription(dishName) {
  const descriptions = [
    `${dishName} l√† m√≥n ƒÉn truy·ªÅn th·ªëng ƒë∆∞·ª£c ch·∫ø bi·∫øn t·ª´ nguy√™n li·ªáu t∆∞∆°i ngon.`,
    `M√≥n ${dishName} c√≥ h∆∞∆°ng v·ªã ƒë·∫≠m ƒë√†, th√≠ch h·ª£p cho b·ªØa c∆°m gia ƒë√¨nh.`,
    `${dishName} ƒë∆∞·ª£c n·∫•u theo c√¥ng th·ª©c truy·ªÅn th·ªëng, gi·ªØ nguy√™n h∆∞∆°ng v·ªã ƒë·∫∑c tr∆∞ng.`,
    `M√≥n ƒÉn b·ªï d∆∞·ª°ng ${dishName} cung c·∫•p ƒë·∫ßy ƒë·ªß ch·∫•t dinh d∆∞·ª°ng cho c∆° th·ªÉ.`,
    `${dishName} l√† s·ª± k·∫øt h·ª£p ho√†n h·∫£o gi·ªØa nguy√™n li·ªáu t∆∞∆°i ngon v√† k·ªπ thu·∫≠t n·∫•u n∆∞·ªõng.`,
    `M√≥n ${dishName} c√≥ v·ªã ng·ªçt t·ª± nhi√™n, th∆°m ngon v√† d·ªÖ ƒÉn.`,
    `${dishName} ƒë∆∞·ª£c ch·∫ø bi·∫øn c·∫©n th·∫≠n v·ªõi gia v·ªã v·ª´a ph·∫£i, h·∫•p d·∫´n m·ªçi l·ª©a tu·ªïi.`
  ];
  
  return getRandomElement(descriptions);
}

async function generateDishes() {
  const uri = process.env.MONGODB_URI || 'mongodb://localhost:27017/military-logistics';
  const client = new MongoClient(uri);
  
  try {
    await client.connect();
    console.log('Connected to MongoDB');
    
    const db = client.db();
    const dishesCollection = db.collection('dishes');
    
    // Check if we already have dishes
    const existingCount = await dishesCollection.countDocuments();
    console.log(`Existing dishes count: ${existingCount}`);
    
    const dishes = [];
    const usedNames = new Set();
    
    for (let i = 1; i <= 1000; i++) {
      let dishName;
      let attempts = 0;
      
      // Generate unique dish name
      do {
        dishName = generateDishName();
        attempts++;
        if (attempts > 50) {
          dishName = `${generateDishName()} ${i}`;
          break;
        }
      } while (usedNames.has(dishName));
      
      usedNames.add(dishName);
      
      const ingredients = generateIngredients();
      const mainIngredient = ingredients[0]; // First ingredient is always main
      
      const dish = {
        name: dishName,
        description: generateDescription(dishName),
        mainLTTP: {
          lttpId: mainIngredient.lttpId,
          lttpName: mainIngredient.lttpName,
          category: mainIngredients.find(ing => ing.id === mainIngredient.lttpId)?.category || 'Kh√°c'
        },
        ingredients: ingredients,
        servings: getRandomNumber(4, 20),
        preparationTime: getRandomNumber(15, 120),
        difficulty: getRandomElement(difficulties),
        category: getRandomElement(categories),
        createdAt: new Date(),
        updatedAt: new Date()
      };
      
      dishes.push(dish);
      
      // Insert in batches of 100
      if (dishes.length === 100) {
        await dishesCollection.insertMany(dishes);
        console.log(`Inserted batch: ${i - 99} - ${i} dishes`);
        dishes.length = 0; // Clear array
      }
    }
    
    // Insert remaining dishes
    if (dishes.length > 0) {
      await dishesCollection.insertMany(dishes);
      console.log(`Inserted final batch: ${dishes.length} dishes`);
    }
    
    const finalCount = await dishesCollection.countDocuments();
    console.log(`\n‚úÖ Successfully generated dishes!`);
    console.log(`Total dishes in database: ${finalCount}`);
    console.log(`New dishes added: ${finalCount - existingCount}`);
    
  } catch (error) {
    console.error('Error generating dishes:', error);
  } finally {
    await client.close();
    console.log('Disconnected from MongoDB');
  }
}

// Run the script
if (require.main === module) {
  console.log('üöÄ Starting dish generation...\n');
  generateDishes().catch(console.error);
}

module.exports = { generateDishes }; 