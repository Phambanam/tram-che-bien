const { MongoClient, ObjectId } = require('mongodb');

async function createSampleTofuOutputs() {
  const client = new MongoClient(process.env.MONGODB_URI || 'mongodb://127.0.0.1:27017/military-logistics');
  
  try {
    await client.connect();
    const db = client.db();
    
    console.log('=== CREATING SAMPLE TOFU SUPPLY OUTPUTS ===\n');
    
    // Get tofu product ID
    const tofuProduct = await db.collection('products').findOne({ name: /đậu phụ/i });
    if (!tofuProduct) {
      console.log('❌ No tofu product found');
      return;
    }
    
    // Get units
    const units = await db.collection('units').find({}).toArray();
    if (units.length === 0) {
      console.log('❌ No units found');
      return;
    }
    
    // Create sample outputs for the last 7 days
    const today = new Date();
    const sampleOutputs = [];
    
    for (let i = 0; i < 7; i++) {
      const date = new Date(today);
      date.setDate(today.getDate() - i);
      
      // Create 1-2 outputs per day
      const outputsPerDay = Math.floor(Math.random() * 2) + 1;
      
      for (let j = 0; j < outputsPerDay; j++) {
        const randomUnit = units[Math.floor(Math.random() * units.length)];
        const quantity = Math.floor(Math.random() * 20) + 5; // 5-25kg
        
        sampleOutputs.push({
          receivingUnit: randomUnit._id,
          productId: tofuProduct._id,
          quantity: quantity,
          outputDate: date,
          receiver: `Đại diện ${randomUnit.name}`,
          status: "completed",
          note: `Xuất đậu phụ cho ${randomUnit.name} - Dữ liệu mẫu`,
          createdBy: new ObjectId("6841d3f07ac7122b5c0f00f8"),
          createdAt: new Date(),
          updatedAt: new Date(),
          metadata: {
            autoGenerated: true,
            sampleData: true
          }
        });
      }
    }
    
    // Insert sample outputs
    let inserted = 0;
    for (const output of sampleOutputs) {
      // Check if similar output already exists
      const existing = await db.collection('supplyOutputs').findOne({
        productId: output.productId,
        receivingUnit: output.receivingUnit,
        outputDate: {
          $gte: new Date(output.outputDate.toDateString()),
          $lte: new Date(output.outputDate.getTime() + 24 * 60 * 60 * 1000)
        }
      });
      
      if (!existing) {
        await db.collection('supplyOutputs').insertOne(output);
        inserted++;
      }
    }
    
    console.log(`✓ Created ${inserted} sample tofu supply outputs`);
    
    // Verify the outputs were created
    const totalOutputs = await db.collection('supplyOutputs').aggregate([
      {
        $lookup: {
          from: "products",
          localField: "productId",  
          foreignField: "_id",
          as: "productInfo"
        }
      },
      {
        $unwind: "$productInfo" 
      },
      {
        $match: {
          "productInfo.name": /đậu phụ/i
        }
      }
    ]).toArray();
    
    console.log(`✓ Total tofu outputs in database: ${totalOutputs.length}`);
    
    // Show summary by date
    const outputsByDate = {};
    totalOutputs.forEach(output => {
      const dateStr = output.outputDate.toISOString().split('T')[0];
      if (!outputsByDate[dateStr]) {
        outputsByDate[dateStr] = 0;
      }
      outputsByDate[dateStr] += output.quantity;
    });
    
    console.log('\nTofu outputs by date:');
    Object.entries(outputsByDate)
      .sort(([a], [b]) => b.localeCompare(a))
      .forEach(([date, quantity]) => {
        console.log(`  ${date}: ${quantity}kg`);
      });
    
    console.log('\n=== SAMPLE TOFU OUTPUTS CREATED ===');
    
  } catch (error) {
    console.error('Error creating sample tofu outputs:', error);
  } finally {
    await client.close();
  }
}

// Load environment variables
if (typeof require !== 'undefined') {
  try {
    require('dotenv').config();
  } catch (e) {
    console.log('dotenv not available, using default connection');
  }
}

createSampleTofuOutputs(); 