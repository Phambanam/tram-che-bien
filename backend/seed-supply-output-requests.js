const { MongoClient, ObjectId } = require('mongodb');

async function seedSupplyOutputRequests() {
  const client = new MongoClient(process.env.MONGODB_URI || 'mongodb://admin:password@localhost:27017/military-logistics?authSource=admin');
  
  try {
    await client.connect();
    console.log('üîó Connected to MongoDB');
    
    const db = client.db();
    
    // Clear existing requests
    console.log('üßπ Clearing existing supply output requests...');
    const deleteResult = await db.collection('supplyOutputs').deleteMany({
      type: 'request'
    });
    console.log(`Deleted ${deleteResult.deletedCount} existing requests`);
    
    // Get data needed for creating requests
    console.log('üìã Fetching units, products, and users...');
    const units = await db.collection('units').find({}).toArray();
    const products = await db.collection('products').find({}).toArray();
    const unitAssistants = await db.collection('users').find({ role: 'unitAssistant' }).toArray();
    
    if (units.length === 0 || products.length === 0 || unitAssistants.length === 0) {
      console.log('‚ùå Missing required data. Please ensure units, products, and unit assistants exist.');
      return;
    }
    
    console.log(`Found ${units.length} units, ${products.length} products, ${unitAssistants.length} unit assistants`);
    
    // Create sample supply output requests
    const requests = [];
    const priorities = ['normal', 'urgent', 'critical'];
    const reasons = [
      'Chu·∫©n b·ªã cho ho·∫°t ƒë·ªông hu·∫•n luy·ªán',
      'B·ªï sung cho b·ªØa ƒÉn c·ªßa ƒë∆°n v·ªã', 
      'Ph·ª•c v·ª• l·ªÖ t·∫øt v√† c√°c ho·∫°t ƒë·ªông ƒë·∫∑c bi·ªát',
      'D·ª± tr·ªØ cho t√¨nh hu·ªëng kh·∫©n c·∫•p',
      'Thay th·∫ø h√†ng h√≥a h·∫øt h·∫°n s·ª≠ d·ª•ng'
    ];
    
    // Create requests for next 7 days
    for (let day = 0; day < 7; day++) {
      const requestDate = new Date();
      requestDate.setDate(requestDate.getDate() + day);
      
      // Each unit assistant creates 2-3 requests per day
      for (const assistant of unitAssistants) {
        const requestCount = Math.floor(Math.random() * 2) + 2; // 2-3 requests
        
        for (let i = 0; i < requestCount; i++) {
          const randomProduct = products[Math.floor(Math.random() * products.length)];
          const randomPriority = priorities[Math.floor(Math.random() * priorities.length)];
          const randomReason = reasons[Math.floor(Math.random() * reasons.length)];
          
          // Get unit for this assistant
          const assistantUnit = units.find(u => u._id.equals(assistant.unit));
          
          if (assistantUnit) {
            requests.push({
              type: 'request',
              receivingUnit: assistantUnit._id,
              productId: randomProduct._id,
              quantity: Math.floor(Math.random() * 50) + 10, // 10-60 kg
              requestDate: new Date(requestDate),
              outputDate: new Date(requestDate),
              priority: randomPriority,
              reason: randomReason,
              receiver: `${assistantUnit.name} - Y√™u c·∫ßu`,
              status: Math.random() > 0.7 ? 'pending' : 'pending', // Most are pending
              note: `Y√™u c·∫ßu ${randomProduct.name} cho ${assistantUnit.name}`,
              requestedBy: assistant._id,
              createdBy: assistant._id,
              createdAt: new Date(),
              updatedAt: new Date(),
            });
          }
        }
      }
    }
    
    // Add some processed requests (approved/rejected) for demo
    const processedRequests = [];
    const brigadeAssistants = await db.collection('users').find({ role: 'brigadeAssistant' }).toArray();
    
    if (brigadeAssistants.length > 0) {
      const brigadeAssistant = brigadeAssistants[0];
      
      // Add 5 approved requests from yesterday
      const yesterday = new Date();
      yesterday.setDate(yesterday.getDate() - 1);
      
      for (let i = 0; i < 5; i++) {
        const randomProduct = products[Math.floor(Math.random() * products.length)];
        const randomUnit = units[Math.floor(Math.random() * units.length)];
        const randomAssistant = unitAssistants[Math.floor(Math.random() * unitAssistants.length)];
        
        processedRequests.push({
          type: 'request',
          receivingUnit: randomUnit._id,
          productId: randomProduct._id,
          quantity: Math.floor(Math.random() * 40) + 20,
          requestDate: yesterday,
          outputDate: yesterday,
          priority: 'normal',
          reason: 'Y√™u c·∫ßu ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω',
          receiver: `${randomUnit.name} - Y√™u c·∫ßu`,
          status: 'approved',
          note: 'Y√™u c·∫ßu ƒë∆∞·ª£c ph√™ duy·ªát',
          requestedBy: randomAssistant._id,
          createdBy: randomAssistant._id,
          approvedBy: brigadeAssistant._id,
          approvedAt: new Date(yesterday.getTime() + 2 * 60 * 60 * 1000), // 2 hours later
          approvedQuantity: Math.floor(Math.random() * 40) + 20,
          approvalNote: 'Ph√™ duy·ªát theo y√™u c·∫ßu',
          createdAt: yesterday,
          updatedAt: new Date(yesterday.getTime() + 2 * 60 * 60 * 1000),
        });
      }
      
      // Add 2 rejected requests
      for (let i = 0; i < 2; i++) {
        const randomProduct = products[Math.floor(Math.random() * products.length)];
        const randomUnit = units[Math.floor(Math.random() * units.length)];
        const randomAssistant = unitAssistants[Math.floor(Math.random() * unitAssistants.length)];
        
        processedRequests.push({
          type: 'request',
          receivingUnit: randomUnit._id,
          productId: randomProduct._id,
          quantity: Math.floor(Math.random() * 100) + 50, // Higher quantity
          requestDate: yesterday,
          outputDate: yesterday,
          priority: 'normal',
          reason: 'Y√™u c·∫ßu b·ªã t·ª´ ch·ªëi',
          receiver: `${randomUnit.name} - Y√™u c·∫ßu`,
          status: 'rejected',
          note: 'Y√™u c·∫ßu s·ªë l∆∞·ª£ng l·ªõn',
          requestedBy: randomAssistant._id,
          createdBy: randomAssistant._id,
          rejectedBy: brigadeAssistant._id,
          rejectedAt: new Date(yesterday.getTime() + 1 * 60 * 60 * 1000), // 1 hour later
          rejectionReason: 'Kh√¥ng ƒë·ªß t·ªìn kho ƒë·ªÉ ƒë√°p ·ª©ng y√™u c·∫ßu',
          createdAt: yesterday,
          updatedAt: new Date(yesterday.getTime() + 1 * 60 * 60 * 1000),
        });
      }
    }
    
    // Combine all requests
    const allRequests = [...requests, ...processedRequests];
    
    if (allRequests.length > 0) {
      console.log('üì¶ Inserting supply output requests...');
      const result = await db.collection('supplyOutputs').insertMany(allRequests);
      console.log(`‚úÖ Created ${result.insertedCount} supply output requests`);
      
      // Show summary
      const pendingCount = allRequests.filter(r => r.status === 'pending').length;
      const approvedCount = allRequests.filter(r => r.status === 'approved').length;
      const rejectedCount = allRequests.filter(r => r.status === 'rejected').length;
      
      console.log('\nüìä Summary by status:');
      console.log(`   - Pending: ${pendingCount}`);
      console.log(`   - Approved: ${approvedCount}`);
      console.log(`   - Rejected: ${rejectedCount}`);
      console.log(`   - Total: ${allRequests.length}`);
      
      // Show summary by priority
      const urgentCount = allRequests.filter(r => r.priority === 'urgent').length;
      const criticalCount = allRequests.filter(r => r.priority === 'critical').length;
      const normalCount = allRequests.filter(r => r.priority === 'normal').length;
      
      console.log('\n‚ö° Summary by priority:');
      console.log(`   - Critical: ${criticalCount}`);
      console.log(`   - Urgent: ${urgentCount}`);
      console.log(`   - Normal: ${normalCount}`);
      
      // Show sample requests
      console.log('\nüìã Sample requests created:');
      const sampleRequests = allRequests.slice(0, 5);
      for (const request of sampleRequests) {
        const unit = units.find(u => u._id.equals(request.receivingUnit));
        const product = products.find(p => p._id.equals(request.productId));
        console.log(`   - ${product?.name || 'Unknown'}: ${request.quantity}kg ‚Üí ${unit?.name || 'Unknown'} (${request.status})`);
      }
    } else {
      console.log('‚ùå No requests created. Check if required data exists.');
    }
    
  } catch (error) {
    console.error('‚ùå Error seeding supply output requests:', error);
  } finally {
    await client.close();
    console.log('\nüîå Disconnected from MongoDB');
  }
}

// Run the seeding
seedSupplyOutputRequests().catch(console.error); 