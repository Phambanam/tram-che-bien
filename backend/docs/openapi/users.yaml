"/users":
  get:
    tags:
      - Users
    summary: Get all users
    description: Retrieve a list of all users with optional pagination and filtering
    operationId: getUsers
    security:
      - BearerAuth: []
    parameters:
      - name: page
        in: query
        description: Page number for pagination
        schema:
          type: integer
          default: 1
          minimum: 1
      - name: limit
        in: query
        description: Number of items per page
        schema:
          type: integer
          default: 10
          minimum: 1
          maximum: 100
      - name: role
        in: query
        description: Filter by user role
        schema:
          type: string
          enum: [admin, commander, brigadeAssistant, unitAssistant]
      - name: unit
        in: query
        description: Filter by unit ID
        schema:
          type: string
      - name: status
        in: query
        description: Filter by user status
        schema:
          type: string
          enum: [active, inactive]
    responses:
      '200':
        description: List of users
        content:
          application/json:
            schema:
              allOf:
                - $ref: './schemas.yaml#/PaginatedResponse'
                - type: object
                  properties:
                    data:
                      type: array
                      items:
                        $ref: './schemas.yaml#/User'
      '401':
        description: Unauthorized
        content:
          application/json:
            schema:
              $ref: './schemas.yaml#/ErrorResponse'
      '403':
        description: Forbidden - Not enough permissions
        content:
          application/json:
            schema:
              $ref: './schemas.yaml#/ErrorResponse'

  post:
    tags:
      - Users
    summary: Create new user
    description: Create a new user (Admin only)
    operationId: createUser
    security:
      - BearerAuth: []
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - username
              - password
              - fullName
              - rank
              - position
              - role
              - unit
            properties:
              username:
                type: string
                example: "johndoe"
              password:
                type: string
                format: password
                example: "password123"
              fullName:
                type: string
                example: "John Doe"
              rank:
                type: string
                example: "Captain"
              position:
                type: string
                example: "Unit Commander"
              role:
                type: string
                enum: [admin, commander, brigadeAssistant, unitAssistant]
                example: "unitAssistant"
              unit:
                type: string
                description: Unit ID
                example: "60a1e2c3d4e5f6a7b8c9d0e1"
              status:
                type: string
                enum: [active, inactive]
                default: active
                example: "active"
    responses:
      '201':
        description: User created successfully
        content:
          application/json:
            schema:
              type: object
              properties:
                success:
                  type: boolean
                  example: true
                message:
                  type: string
                  example: "Tạo người dùng thành công"
                data:
                  $ref: './schemas.yaml#/User'
      '400':
        description: Bad request
        content:
          application/json:
            schema:
              $ref: './schemas.yaml#/ErrorResponse'
      '401':
        description: Unauthorized
        content:
          application/json:
            schema:
              $ref: './schemas.yaml#/ErrorResponse'
      '403':
        description: Forbidden - Admin access required
        content:
          application/json:
            schema:
              $ref: './schemas.yaml#/ErrorResponse'

"/users/{id}":
  get:
    tags:
      - Users
    summary: Get user by ID
    description: Retrieve a specific user by ID
    operationId: getUserById
    security:
      - BearerAuth: []
    parameters:
      - name: id
        in: path
        description: User ID
        required: true
        schema:
          type: string
    responses:
      '200':
        description: User found
        content:
          application/json:
            schema:
              type: object
              properties:
                success:
                  type: boolean
                  example: true
                data:
                  $ref: './schemas.yaml#/User'
      '401':
        description: Unauthorized
        content:
          application/json:
            schema:
              $ref: './schemas.yaml#/ErrorResponse'
      '403':
        description: Forbidden - Not enough permissions
        content:
          application/json:
            schema:
              $ref: './schemas.yaml#/ErrorResponse'
      '404':
        description: User not found
        content:
          application/json:
            schema:
              $ref: './schemas.yaml#/ErrorResponse'

  patch:
    tags:
      - Users
    summary: Update user
    description: Update an existing user by ID
    operationId: updateUser
    security:
      - BearerAuth: []
    parameters:
      - name: id
        in: path
        description: User ID
        required: true
        schema:
          type: string
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              fullName:
                type: string
                example: "John Doe"
              rank:
                type: string
                example: "Major"
              position:
                type: string
                example: "Unit Commander"
              role:
                type: string
                enum: [admin, commander, brigadeAssistant, unitAssistant]
                example: "commander"
              unit:
                type: string
                description: Unit ID
                example: "60a1e2c3d4e5f6a7b8c9d0e1"
              status:
                type: string
                enum: [active, inactive]
                example: "active"
              password:
                type: string
                format: password
                example: "newpassword123"
    responses:
      '200':
        description: User updated successfully
        content:
          application/json:
            schema:
              type: object
              properties:
                success:
                  type: boolean
                  example: true
                message:
                  type: string
                  example: "Cập nhật người dùng thành công"
                data:
                  $ref: './schemas.yaml#/User'
      '400':
        description: Bad request
        content:
          application/json:
            schema:
              $ref: './schemas.yaml#/ErrorResponse'
      '401':
        description: Unauthorized
        content:
          application/json:
            schema:
              $ref: './schemas.yaml#/ErrorResponse'
      '403':
        description: Forbidden - Not enough permissions
        content:
          application/json:
            schema:
              $ref: './schemas.yaml#/ErrorResponse'
      '404':
        description: User not found
        content:
          application/json:
            schema:
              $ref: './schemas.yaml#/ErrorResponse'

  delete:
    tags:
      - Users
    summary: Delete user
    description: Delete a user by ID (Admin only)
    operationId: deleteUser
    security:
      - BearerAuth: []
    parameters:
      - name: id
        in: path
        description: User ID
        required: true
        schema:
          type: string
    responses:
      '200':
        description: User deleted successfully
        content:
          application/json:
            schema:
              type: object
              properties:
                success:
                  type: boolean
                  example: true
                message:
                  type: string
                  example: "Xóa người dùng thành công"
      '401':
        description: Unauthorized
        content:
          application/json:
            schema:
              $ref: './schemas.yaml#/ErrorResponse'
      '403':
        description: Forbidden - Admin access required
        content:
          application/json:
            schema:
              $ref: './schemas.yaml#/ErrorResponse'
      '404':
        description: User not found
        content:
          application/json:
            schema:
              $ref: './schemas.yaml#/ErrorResponse' 