"use client"

import { useState, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Plus, Eye, Edit, Trash2, Calendar, User, Shield } from "lucide-react"
import Link from "next/link"
import { ArticleDialog } from "./articles/article-dialog"
import { DeleteArticleDialog } from "./articles/delete-article-dialog"
import { contentApi } from "@/lib/api-client"
import { useToast } from "@/components/ui/use-toast"
import { useAuth } from "@/components/auth/auth-provider"

interface Article {
  id: string
  title: string
  content: string
  type: "article" | "image" | "video"
  imageUrl?: string
  videoUrl?: string
  author: string
  createdAt: string
  status: "published" | "draft"
}

// API service for articles
const articleService = {
  async getAll(type?: string) {
    return contentApi.getContent(type)
  },

  async getById(id: string) {
    return contentApi.getContentById(id)
  },

  async create(data: Partial<Article>) {
    return contentApi.createContent(data)
  },

  async update(id: string, data: Partial<Article>) {
    return contentApi.updateContent(id, data)
  },

  async delete(id: string) {
    return contentApi.deleteContent(id)
  },
}

export function DashboardContent() {
  const [articles, setArticles] = useState<Article[]>([])
  const [selectedArticle, setSelectedArticle] = useState<Article | null>(null)
  const [isArticleDialogOpen, setIsArticleDialogOpen] = useState(false)
  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false)
  const [isLoading, setIsLoading] = useState(true)
  const { toast } = useToast()
  const { user } = useAuth()

  // Ki·ªÉm tra quy·ªÅn admin (Tr·ª£ l√Ω l·ªØ ƒëo√†n)
  const isAdmin = user?.role === "brigadeAssistant" || user?.role === "admin"

  useEffect(() => {
    const fetchArticles = async () => {
      try {
        // Try to fetch from API first
        const data = await articleService.getAll()
        if (data && Array.isArray(data)) {
          setArticles(data)
        } else {
          // Fallback to mock data if API returns unexpected format
          setArticles(getMockArticles())
        }
      } catch (error) {
        console.error("Error fetching articles:", error)
        toast({
          title: "L·ªói",
          description: "Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu b√†i vi·∫øt. Vui l√≤ng th·ª≠ l·∫°i sau.",
          variant: "destructive",
        })
        setArticles(getMockArticles())
      } finally {
        setIsLoading(false)
      }
    }

    fetchArticles()
  }, [toast])

  // Mock data function
  const getMockArticles = (): Article[] => {
    return [
      {
        id: "1",
        title: "L·ªØ ƒëo√†n 279 ƒë·∫°t th√†nh t√≠ch xu·∫•t s·∫Øc trong hu·∫•n luy·ªán",
        content: "Trong th√°ng v·ª´a qua, L·ªØ ƒëo√†n 279 ƒë√£ ho√†n th√†nh xu·∫•t s·∫Øc c√°c nhi·ªám v·ª• hu·∫•n luy·ªán ƒë∆∞·ª£c giao...",
        type: "article",
        imageUrl: "/placeholder.svg?height=200&width=300",
        author: "Thi·∫øu t√° Nguy·ªÖn VƒÉn A",
        createdAt: "2024-01-15",
        status: "published",
      },
      {
        id: "2",
        title: "H·ªôi thi ƒë∆°n v·ªã nu√¥i qu√¢n gi·ªèi nƒÉm 2024",
        content: "Cu·ªôc thi ƒë√°nh gi√° ch·∫•t l∆∞·ª£ng c√¥ng t√°c h·∫≠u c·∫ßn v√† qu·∫£n l√Ω qu√¢n nhu c·ªßa c√°c ƒë∆°n v·ªã...",
        type: "article",
        imageUrl: "/placeholder.svg?height=200&width=300",
        author: "ƒê·∫°i √∫y Tr·∫ßn Th·ªã B",
        createdAt: "2024-01-10",
        status: "published",
      },
      {
        id: "3",
        title: "Video gi·ªõi thi·ªáu tr·∫°m ch·∫ø bi·∫øn th·ª±c ph·∫©m",
        content: "Video gi·ªõi thi·ªáu quy tr√¨nh ch·∫ø bi·∫øn th·ª±c ph·∫©m t·∫°i tr·∫°m ch·∫ø bi·∫øn c·ªßa L·ªØ ƒëo√†n 279...",
        type: "video",
        videoUrl: "https://example.com/video.mp4",
        author: "Trung √∫y L√™ VƒÉn C",
        createdAt: "2024-01-05",
        status: "published",
      },
    ]
  }

  const handleAddArticle = () => {
    setSelectedArticle(null)
    setIsArticleDialogOpen(true)
  }

  const handleEditArticle = (article: Article) => {
    setSelectedArticle(article)
    setIsArticleDialogOpen(true)
  }

  const handleDeleteArticle = (article: Article) => {
    setSelectedArticle(article)
    setIsDeleteDialogOpen(true)
  }

  const handleSaveArticle = async (articleData: Partial<Article>) => {
    try {
      if (selectedArticle) {
        // Update existing article
        await articleService.update(selectedArticle.id, articleData)
        setArticles((prev) =>
          prev.map((article) =>
            article.id === selectedArticle.id
              ? { ...article, ...articleData, updatedAt: new Date().toISOString() }
              : article,
          ),
        )
        toast({
          title: "Th√†nh c√¥ng",
          description: "C·∫≠p nh·∫≠t b√†i vi·∫øt th√†nh c√¥ng",
        })
      } else {
        // Add new article
        const newArticleData: Partial<Article> = {
          ...articleData,
          author: "Current User", // Replace with actual user
          createdAt: new Date().toISOString(),
          status: "published" as const,
        }

        const response = await articleService.create(newArticleData)
        const newArticle = (response as any)?.data || {
          id: Date.now().toString(),
          ...newArticleData,
        } as Article

        setArticles((prev) => [newArticle, ...prev])
        toast({
          title: "Th√†nh c√¥ng",
          description: "Th√™m b√†i vi·∫øt m·ªõi th√†nh c√¥ng",
        })
      }
    } catch (error) {
      console.error("Error saving article:", error)
      toast({
        title: "L·ªói",
        description: "Kh√¥ng th·ªÉ l∆∞u b√†i vi·∫øt. Vui l√≤ng th·ª≠ l·∫°i sau.",
        variant: "destructive",
      })
    }
    setIsArticleDialogOpen(false)
  }

  const handleConfirmDelete = async () => {
    if (selectedArticle) {
      try {
        await articleService.delete(selectedArticle.id)
        setArticles((prev) => prev.filter((article) => article.id !== selectedArticle.id))
        toast({
          title: "Th√†nh c√¥ng",
          description: "X√≥a b√†i vi·∫øt th√†nh c√¥ng",
        })
      } catch (error) {
        console.error("Error deleting article:", error)
        toast({
          title: "L·ªói",
          description: "Kh√¥ng th·ªÉ x√≥a b√†i vi·∫øt. Vui l√≤ng th·ª≠ l·∫°i sau.",
          variant: "destructive",
        })
      }
      setIsDeleteDialogOpen(false)
    }
  }

  const getTypeIcon = (type: string) => {
    switch (type) {
      case "video":
        return "üé•"
      case "image":
        return "üñºÔ∏è"
      default:
        return "üìÑ"
    }
  }

  if (isLoading) {
    return (
      <div className="container">
        <div className="bg-white p-6 rounded-lg shadow-md">
          <div className="animate-pulse">
            <div className="h-8 bg-gray-200 rounded w-1/3 mb-6"></div>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              {[1, 2, 3].map((item) => (
                <div key={item} className="border border-gray-300 p-4 rounded-md">
                  <div className="bg-gray-200 h-40 mb-4 rounded"></div>
                  <div className="h-4 bg-gray-200 rounded mb-2"></div>
                  <div className="h-3 bg-gray-200 rounded w-2/3"></div>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>
    )
  }

  return (
    <div className="w-full p-6">
      <div className="bg-white p-6 rounded-lg shadow-md">
        <div className="flex justify-between items-center mb-6">
          <h2 className="text-2xl font-bold text-center text-[#b45f06]">TRANG CH√çNH</h2>
          <div className="flex items-center gap-3">
            {!isAdmin && (
              <div className="flex items-center gap-2 text-sm text-amber-600 bg-amber-50 px-3 py-1 rounded-full">
                <Shield className="h-4 w-4" />
                <span>Ch·∫ø ƒë·ªô xem</span>
              </div>
            )}
            {isAdmin && (
              <Button onClick={handleAddArticle} className="bg-[#b45f06] hover:bg-[#8b4513]">
                <Plus className="h-4 w-4 mr-2" />
                Th√™m b√†i vi·∫øt
              </Button>
            )}
          </div>
        </div>

        <div className="mb-8">
          <h3 className="text-xl font-semibold mb-4">GI·ªöI THI·ªÜU L·ªÆ ƒêO√ÄN 279</h3>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <p className="mb-4">
                L·ªØ ƒëo√†n 279 l√† m·ªôt ƒë∆°n v·ªã qu√¢n ƒë·ªôi tinh nhu·ªá thu·ªôc Qu√¢n khu 7, ƒë∆∞·ª£c th√†nh l·∫≠p v√†o nƒÉm 1975. V·ªõi truy·ªÅn
                th·ªëng v·∫ª vang v√† nhi·ªÅu th√†nh t√≠ch xu·∫•t s·∫Øc trong c√¥ng t√°c hu·∫•n luy·ªán, s·∫µn s√†ng chi·∫øn ƒë·∫•u v√† x√¢y d·ª±ng ƒë∆°n
                v·ªã v·ªØng m·∫°nh to√†n di·ªán.
              </p>
              <p className="mb-4">
                H·ªá th·ªëng qu·∫£n l√Ω tr·∫°m ch·∫ø bi·∫øn l√† m·ªôt ph·∫ßn quan tr·ªçng trong c√¥ng t√°c h·∫≠u c·∫ßn c·ªßa L·ªØ ƒëo√†n, ƒë·∫£m b·∫£o ch·∫•t
                l∆∞·ª£ng b·ªØa ƒÉn v√† s·ª©c kh·ªèe cho c√°n b·ªô, chi·∫øn sƒ© trong ƒë∆°n v·ªã.
              </p>
              
              {/* Th√¥ng b√°o quy·ªÅn h·∫°n */}
              <div className="mt-6 p-4 bg-blue-50 border-l-4 border-blue-400 rounded">
                <h4 className="font-semibold text-blue-800 mb-2">üìã Quy·ªÅn h·∫°n h·ªá th·ªëng:</h4>
                <ul className="text-sm text-blue-700 space-y-1">
                  <li><strong>‚Ä¢ Tr·ª£ l√Ω l·ªØ ƒëo√†n (Admin):</strong> Th√™m, s·ª≠a, x√≥a b√†i vi·∫øt</li>
                  <li><strong>‚Ä¢ C√°c ch·ª©c v·ª• kh√°c:</strong> Ch·ªâ ƒë∆∞·ª£c xem chi ti·∫øt b√†i vi·∫øt</li>
                  <li><strong>‚Ä¢ Vai tr√≤ hi·ªán t·∫°i:</strong> 
                    <span className={`ml-2 px-2 py-1 rounded text-xs font-medium ${
                      isAdmin ? 'bg-green-100 text-green-800' : 'bg-amber-100 text-amber-800'
                    }`}>
                      {isAdmin ? 'Qu·∫£n tr·ªã vi√™n' : 'Ng∆∞·ªùi xem'}
                    </span>
                  </li>
                </ul>
              </div>
            </div>
            <div className="bg-gray-200 h-64 flex items-center justify-center rounded-lg">
              <img
                src="/anh.jpg"
                alt="H√¨nh ·∫£nh L·ªØ ƒëo√†n 279"
                className="w-full h-full object-cover rounded-lg"
              />
            </div>
          </div>
        </div>

        <div>
          <h3 className="text-xl font-semibold mb-4">
            C√ÅC B√ÄI VI·∫æT, H√åNH ·∫¢NH, VIDEO GI·ªöI THI·ªÜU L·ªÆ ƒêO√ÄN 279 V√Ä H·ªòI THI ƒê∆†N V·ªä NU√îI QU√ÇN GI·ªéI, QU·∫¢N L√ù QU√ÇN NHU T·ªêT
          </h3>

          {articles.length === 0 ? (
            <div className="text-center py-12">
              <p className="text-gray-500 mb-4">Ch∆∞a c√≥ b√†i vi·∫øt n√†o</p>
              {isAdmin && (
                <Button onClick={handleAddArticle} className="bg-[#b45f06] hover:bg-[#8b4513]">
                  <Plus className="h-4 w-4 mr-2" />
                  Th√™m b√†i vi·∫øt ƒë·∫ßu ti√™n
                </Button>
              )}
            </div>
          ) : (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {articles.map((article) => (
                <Card key={article.id} className="border border-gray-300 hover:shadow-lg transition-shadow">
                  <CardHeader className="pb-3">
                    <div className="flex justify-between items-start mb-2">
                      <Badge variant={article.status === "published" ? "default" : "secondary"}>
                        {getTypeIcon(article.type)}{" "}
                        {article.type === "article" ? "B√†i vi·∫øt" : article.type === "video" ? "Video" : "H√¨nh ·∫£nh"}
                      </Badge>
                      {isAdmin && (
                        <div className="flex gap-1">
                          <Button
                            variant="ghost"
                            size="sm"
                            onClick={() => handleEditArticle(article)}
                            className="h-8 w-8 p-0"
                            title="Ch·ªânh s·ª≠a"
                          >
                            <Edit className="h-4 w-4" />
                          </Button>
                          <Button
                            variant="ghost"
                            size="sm"
                            onClick={() => handleDeleteArticle(article)}
                            className="h-8 w-8 p-0 text-red-600 hover:text-red-700"
                            title="X√≥a"
                          >
                            <Trash2 className="h-4 w-4" />
                          </Button>
                        </div>
                      )}
                    </div>
                    <CardTitle className="text-lg leading-tight">{article.title}</CardTitle>
                  </CardHeader>
                  <CardContent>
                    {article.imageUrl && (
                      <div className="bg-gray-200 h-40 mb-4 flex items-center justify-center rounded-md overflow-hidden">
                        <img
                          src={article.imageUrl || "/placeholder.svg"}
                          alt={article.title}
                          className="w-full h-full object-cover"
                        />
                      </div>
                    )}
                    {article.videoUrl && (
                      <div className="bg-gray-200 h-40 mb-4 flex items-center justify-center rounded-md">
                        <div className="text-center">
                          <div className="text-4xl mb-2">üé•</div>
                          <p className="text-sm text-gray-600">Video</p>
                        </div>
                      </div>
                    )}
                    <p className="text-sm text-gray-600 mb-4 line-clamp-3">
                      {article.content.replace(/[#*_`~\[\]()]/g, '').replace(/<[^>]*>/g, '').slice(0, 150)}
                      {article.content.length > 150 ? '...' : ''}
                    </p>
                    <div className="flex items-center justify-between text-xs text-gray-500 mb-3">
                      <div className="flex items-center gap-1">
                        <User className="h-3 w-3" />
                        <span>{article.author}</span>
                      </div>
                      <div className="flex items-center gap-1">
                        <Calendar className="h-3 w-3" />
                        <span>{new Date(article.createdAt).toLocaleDateString("vi-VN")}</span>
                      </div>
                    </div>
                    <div className="flex gap-2">
                      <Link href={`/dashboard/articles/${article.id}`} className="flex-1">
                        <Button variant="outline" size="sm" className="w-full">
                          <Eye className="h-4 w-4 mr-2" />
                          Xem chi ti·∫øt
                        </Button>
                      </Link>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          )}
        </div>
      </div>

      <ArticleDialog
        article={selectedArticle}
        open={isArticleDialogOpen}
        onOpenChange={setIsArticleDialogOpen}
        onSave={handleSaveArticle}
      />

      <DeleteArticleDialog
        article={selectedArticle}
        open={isDeleteDialogOpen}
        onOpenChange={setIsDeleteDialogOpen}
        onConfirm={handleConfirmDelete}
      />
    </div>
  )
}
