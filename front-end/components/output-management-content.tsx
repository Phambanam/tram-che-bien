"use client"

import { useState, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from "@/components/ui/dialog"
import { CalendarIcon, Search, FileDown, FileUp, Users, Calculator, Edit } from "lucide-react"
import { format, startOfWeek, addDays, isSameDay } from "date-fns"
import { vi } from "date-fns/locale"
import { useToast } from "@/components/ui/use-toast"
import { unitsApi, dailyRationsApi, categoriesApi } from "@/lib/api-client"

interface Unit {
  _id: string
  name: string
  code?: string
  personnel?: number
  commander?: string
  contact?: string
  description?: string
}

interface DailyRation {
  _id: string
  name: string
  lttpId: string
  lttpName: string
  quantityPerPerson: number
  unit: string
  pricePerUnit: number
  totalCostPerPerson: number
  category: string
  notes?: string
}

interface Category {
  _id: string
  name: string
  slug: string
  description?: string
  itemCount?: number
}

interface SupplyOutputData {
  id: string
  foodName: string
  category: string
  unit: string
  quantityPerPerson: number
  pricePerUnit: number
  units: {
    [unitId: string]: {
      personnel: number
      requirement: number
    }
  }
  totalPersonnel: number
  totalCost: number
  totalAmount: number
}

interface UnitPersonnelData {
  [unitId: string]: number
}

export function OutputManagementContent() {
  const [selectedDate, setSelectedDate] = useState<Date>(new Date())
  const [selectedView, setSelectedView] = useState<"day" | "week">("day")
  const [units, setUnits] = useState<Unit[]>([])
  const [dailyRations, setDailyRations] = useState<DailyRation[]>([])
  const [categories, setCategories] = useState<Category[]>([])
  const [supplyData, setSupplyData] = useState<SupplyOutputData[]>([])
  const [unitPersonnel, setUnitPersonnel] = useState<UnitPersonnelData>({})
  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false)
  const [editingUnit, setEditingUnit] = useState<{ unitId: string; unitName: string; personnel: number } | null>(null)
  const [newPersonnelCount, setNewPersonnelCount] = useState<number>(0)
  const [isLoading, setIsLoading] = useState(true)
  const { toast } = useToast()

  // Get week days starting from Monday
  const getWeekDays = (date: Date) => {
    const start = startOfWeek(date, { weekStartsOn: 1 }) // Monday = 1
    return Array.from({ length: 7 }, (_, i) => addDays(start, i))
  }

  const weekDays = getWeekDays(selectedDate)
  const dayNames = ["Th·ª© hai", "Th·ª© ba", "Th·ª© t∆∞", "Th·ª© nƒÉm", "Th·ª© s√°u", "Th·ª© b·∫£y", "Ch·ªß nh·∫≠t"]

  // Fetch data from APIs
  const fetchData = async () => {
    setIsLoading(true)
    try {
      // Fetch units
      const unitsResponse = await unitsApi.getUnits()
      const unitsData = Array.isArray(unitsResponse) ? unitsResponse : (unitsResponse as any).data || []
      setUnits(unitsData)

      // Initialize unit personnel data
      const personnelData: UnitPersonnelData = {}
      unitsData.forEach((unit: Unit) => {
        personnelData[unit._id] = unit.personnel || 0
      })
      setUnitPersonnel(personnelData)

      // Fetch daily rations
      const dailyRationsResponse = await dailyRationsApi.getDailyRations()
      const dailyRationsData = Array.isArray(dailyRationsResponse) ? dailyRationsResponse : (dailyRationsResponse as any).data || []
      setDailyRations(dailyRationsData)

      // Fetch categories
      const categoriesResponse = await categoriesApi.getCategories()
      const categoriesData = Array.isArray(categoriesResponse) ? categoriesResponse : (categoriesResponse as any).data || []
      setCategories(categoriesData)

      // Generate supply output data
      generateSupplyOutputData(dailyRationsData, unitsData, personnelData)

    } catch (error) {
      console.error("Error fetching data:", error)
      toast({
        title: "L·ªói",
        description: "Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu. Vui l√≤ng th·ª≠ l·∫°i.",
        variant: "destructive",
      })
    } finally {
      setIsLoading(false)
    }
  }

  // Generate supply output data based on daily rations and units
  const generateSupplyOutputData = (rations: DailyRation[], unitsData: Unit[], personnelData: UnitPersonnelData) => {
    const outputData: SupplyOutputData[] = rations.map((ration, index) => {
      const unitRequirements: { [unitId: string]: { personnel: number; requirement: number } } = {}
      let totalPersonnel = 0
      let totalAmount = 0

      unitsData.forEach((unit) => {
        const personnel = personnelData[unit._id] || 0
        const requirement = personnel * ration.quantityPerPerson
        
        unitRequirements[unit._id] = {
          personnel,
          requirement
        }
        
        totalPersonnel += personnel
        totalAmount += requirement
      })

      const totalCost = totalAmount * ration.pricePerUnit

      return {
        id: ration._id,
        foodName: ration.lttpName || ration.name,
        category: ration.category,
        unit: ration.unit,
        quantityPerPerson: ration.quantityPerPerson,
        pricePerUnit: ration.pricePerUnit,
        units: unitRequirements,
        totalPersonnel,
        totalCost,
        totalAmount
      }
    })

    setSupplyData(outputData)
  }

  useEffect(() => {
    fetchData()
  }, [])

  // Handle day/week selection
  const handleDateSelect = (date: Date, view: "day" | "week") => {
    setSelectedDate(date)
    setSelectedView(view)
  }

  // Handle personnel count edit
  const handleEditPersonnel = (unitId: string, unitName: string, currentPersonnel: number) => {
    setEditingUnit({ unitId, unitName, personnel: currentPersonnel })
    setNewPersonnelCount(currentPersonnel)
    setIsEditDialogOpen(true)
  }

  // Save personnel count changes
  const handleSavePersonnelCount = () => {
    if (editingUnit) {
      const updatedPersonnel = { ...unitPersonnel }
      updatedPersonnel[editingUnit.unitId] = newPersonnelCount

      setUnitPersonnel(updatedPersonnel)
      
      // Regenerate supply data with new personnel counts
      generateSupplyOutputData(dailyRations, units, updatedPersonnel)
      
      toast({
        title: "Th√†nh c√¥ng",
        description: `ƒê√£ c·∫≠p nh·∫≠t s·ªë ng∆∞·ªùi ƒÉn cho ${editingUnit.unitName}`,
      })
    }
    setIsEditDialogOpen(false)
    setEditingUnit(null)
  }

  // Calculate category totals to check limits
  const getCategoryTotals = () => {
    const categoryTotals: { [category: string]: { total: number; limit: number } } = {}
    
    // Define category limits (example: 400g for vegetables per person per day)
    const categoryLimits: { [category: string]: number } = {
      "Rau c·ªß qu·∫£": 0.4, // 400g per person
      "Th·ªãt": 0.2, // 200g per person
      "H·∫£i s·∫£n": 0.15, // 150g per person
      "L∆∞∆°ng th·ª±c": 0.6, // 600g per person
      "Gia v·ªã": 0.05, // 50g per person
      "Ch·∫•t ƒë·ªët": 0.002 // 2g per person (for gas calculation)
    }

    supplyData.forEach((item) => {
      if (!categoryTotals[item.category]) {
        categoryTotals[item.category] = {
          total: 0,
          limit: categoryLimits[item.category] || 1
        }
      }
      categoryTotals[item.category].total += item.quantityPerPerson
    })

    return categoryTotals
  }

  const categoryTotals = getCategoryTotals()

  if (isLoading) {
    return (
      <div className="container">
        <div className="bg-white p-6 rounded-lg shadow-md">
          <div className="flex items-center justify-center h-64">
            <div className="text-center">
              <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-[#b45f06] mx-auto mb-4"></div>
              <p>ƒêang t·∫£i d·ªØ li·ªáu...</p>
            </div>
          </div>
        </div>
      </div>
    )
  }

  return (
    <div className="container">
      <div className="bg-white p-6 rounded-lg shadow-md">
        <h2 className="text-2xl font-bold mb-6 text-center text-[#b45f06]">QU·∫¢N L√ù NGU·ªíN XU·∫§T</h2>

        {/* Weekly Calendar Header */}
        <Card className="mb-6">
          <CardHeader>
            <CardTitle className="text-center">üìÜ D√≤ng ng√†y trong tu·∫ßn</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-8 gap-2">
              {/* Individual Days */}
              {weekDays.map((day, index) => (
                <Button
                  key={day.toISOString()}
                  variant={isSameDay(day, selectedDate) && selectedView === "day" ? "default" : "outline"}
                  className="flex flex-col items-center p-4 h-auto"
                  onClick={() => handleDateSelect(day, "day")}
                >
                  <span className="text-sm font-medium">{dayNames[index]}</span>
                  <span className="text-xs text-gray-500">{format(day, "dd/MM")}</span>
                </Button>
              ))}
              
              {/* Whole Week Button */}
              <Button
                variant={selectedView === "week" ? "default" : "outline"}
                className="flex flex-col items-center p-4 h-auto"
                onClick={() => handleDateSelect(selectedDate, "week")}
              >
                <span className="text-sm font-medium">T·ªïng c·∫£ tu·∫ßn</span>
                <span className="text-xs text-gray-500">
                  {format(weekDays[0], "dd/MM")} - {format(weekDays[6], "dd/MM")}
                </span>
              </Button>
            </div>
          </CardContent>
        </Card>

        {/* Main Supply Output Table */}
        <Card>
          <CardHeader>
            <div className="flex justify-between items-center">
              <CardTitle>
                üìä B·∫£ng ch√≠nh - {selectedView === "week" ? "T·ªïng c·∫£ tu·∫ßn" : `${dayNames[weekDays.findIndex(day => isSameDay(day, selectedDate))]}`}
              </CardTitle>
              <div className="flex gap-2">
                <Button variant="outline" className="flex items-center gap-2">
                  <FileDown className="h-4 w-4" />
                  Xu·∫•t Excel
                </Button>
                <Button variant="outline" className="flex items-center gap-2">
                  <FileUp className="h-4 w-4" />
                  Nh·∫≠p Excel
                </Button>
              </div>
            </div>
              </CardHeader>
              <CardContent>
            <div className="overflow-x-auto">
                <Table>
                  <TableHeader>
                    <TableRow>
                    <TableHead className="w-12">STT</TableHead>
                    <TableHead className="min-w-[150px]">T√™n th·ª±c ph·∫©m</TableHead>
                    <TableHead>Ph√¢n lo·∫°i</TableHead>
                    <TableHead>ƒêVT</TableHead>
                    <TableHead>ƒê·ªãnh l∆∞·ª£ng</TableHead>
                    {units.map((unit) => (
                      <TableHead key={`${unit._id}-personnel`} className="text-center bg-blue-50">
                        <div className="flex flex-col">
                          <span className="font-medium">{unit.name}</span>
                          <span className="text-xs text-gray-500">S·ªë ng∆∞·ªùi ƒÉn</span>
                        </div>
                      </TableHead>
                    ))}
                    {units.map((unit) => (
                      <TableHead key={`${unit._id}-requirement`} className="text-center bg-green-50">
                        <div className="flex flex-col">
                          <span className="font-medium">{unit.name}</span>
                          <span className="text-xs text-gray-500">Nhu c·∫ßu</span>
                        </div>
                      </TableHead>
                    ))}
                    <TableHead className="text-center bg-yellow-50">T·ªïng - S·ªë ng∆∞·ªùi ƒÉn</TableHead>
                    <TableHead className="text-center bg-orange-50">T·ªïng - Gi√° th√†nh</TableHead>
                    <TableHead className="text-center bg-red-50">T·ªïng - Th√†nh ti·ªÅn</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                  {supplyData.map((item, index) => (
                    <TableRow key={item.id}>
                        <TableCell>{index + 1}</TableCell>
                      <TableCell className="font-medium">{item.foodName}</TableCell>
                        <TableCell>
                        <Badge variant="outline" className={
                          categoryTotals[item.category] && 
                          categoryTotals[item.category].total > categoryTotals[item.category].limit
                            ? "border-red-500 text-red-700"
                            : "border-green-500 text-green-700"
                        }>
                          {item.category}
                        </Badge>
                      </TableCell>
                      <TableCell>{item.unit}</TableCell>
                      <TableCell className="text-center">
                        {item.quantityPerPerson.toFixed(3)}
                      </TableCell>
                      
                      {/* Personnel columns */}
                      {units.map((unit) => (
                        <TableCell key={`${unit._id}-personnel`} className="text-center bg-blue-50">
                          <Button
                            variant="ghost"
                            size="sm"
                            className="h-auto p-1 hover:bg-blue-100"
                            onClick={() => handleEditPersonnel(unit._id, unit.name, unitPersonnel[unit._id] || 0)}
                          >
                            <div className="flex items-center gap-1">
                              <Users className="h-3 w-3" />
                              <span>{unitPersonnel[unit._id] || 0}</span>
                              <Edit className="h-3 w-3" />
                            </div>
                          </Button>
                        </TableCell>
                      ))}
                      
                      {/* Requirement columns */}
                      {units.map((unit) => (
                        <TableCell key={`${unit._id}-requirement`} className="text-center bg-green-50">
                          {item.units[unit._id]?.requirement.toFixed(3) || "0.000"}
                        </TableCell>
                      ))}
                      
                      <TableCell className="text-center bg-yellow-50 font-medium">
                        {item.totalPersonnel}
                      </TableCell>
                      <TableCell className="text-center bg-orange-50">
                        {item.pricePerUnit.toLocaleString()} ƒë/{item.unit}
                      </TableCell>
                      <TableCell className="text-center bg-red-50 font-medium">
                        {item.totalCost.toLocaleString()} ƒë
                        </TableCell>
                      </TableRow>
                  ))}
                  
                  {/* Total Row */}
                  <TableRow className="bg-gray-100 font-bold">
                    <TableCell colSpan={5} className="text-center">T·ªîNG C·ªòNG</TableCell>
                    {units.map((unit) => (
                      <TableCell key={`${unit._id}-total-personnel`} className="text-center bg-blue-100">
                        {unitPersonnel[unit._id] || 0}
                      </TableCell>
                    ))}
                    {units.map((unit) => (
                      <TableCell key={`${unit._id}-total-requirement`} className="text-center bg-green-100">
                        {supplyData.reduce((sum, item) => sum + (item.units[unit._id]?.requirement || 0), 0).toFixed(3)}
                      </TableCell>
                    ))}
                    <TableCell className="text-center bg-yellow-100">
                      {supplyData.reduce((sum, item) => sum + item.totalPersonnel, 0)}
                    </TableCell>
                    <TableCell className="text-center bg-orange-100">-</TableCell>
                    <TableCell className="text-center bg-red-100">
                      {supplyData.reduce((sum, item) => sum + item.totalCost, 0).toLocaleString()} ƒë
                    </TableCell>
                  </TableRow>
                  </TableBody>
                </Table>
            </div>
              </CardContent>
            </Card>

        {/* Notes Section */}
        <Card className="mt-6">
              <CardHeader>
            <CardTitle>üìù Ch√∫ th√≠ch</CardTitle>
              </CardHeader>
              <CardContent>
            <div className="space-y-3 text-sm">
              <p>
                <strong>Ch√∫ √Ω:</strong> T·ª´ khi l√™n th·ª±c ƒë∆°n c√°c m√≥n t·ª´ng b·ªØa th√¨ ph·∫ßn nhu c·∫ßu s·ª≠ d·ª•ng s·∫Ω xu·∫•t hi·ªán t√™n th·ª±c ph·∫©m theo th·ª±c ƒë∆°n m√≥n 
                (m·ªói m√≥n s·∫Ω c√≥ d·ªØ li·ªáu c·ª• th·ªÉ t·ª´ng th·ª±c ph·∫©m). Ph·∫ßn ƒê·ªãnh l∆∞·ª£ng ƒë√£ nh·∫≠p s·∫µn t·ª´ d·ªØ li·ªáu theo t·ª´ng m·ª©c ƒÉn, 
                hi·ªán t·∫°i √°p d·ª•ng m·ª©c ƒÉn 65.000ƒë sao cho ph√¢n lo·∫°i kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° ƒë·ªãnh m·ª©c.
              </p>
              <p>
                <strong>V√≠ d·ª•:</strong> tr∆∞·ªùng h·ª£p c√≥ 2 hay nhi·ªÅu th·ª±c ph·∫©m c√≥ c√πng chung ph√¢n lo·∫°i nh∆∞ trong ng√†y c√≥ c√† chua, c√† r·ªët, khoai t√¢y 
                thu·ªôc ph√¢n lo·∫°i RAU C·ª¶ QU·∫¢ 400G/NG∆Ø·ªúI/NG√ÄY th√¨ t·ªïng s·ªë l∆∞·ª£ng c·ªßa 3 lo·∫°i n√†y kh√¥ng v∆∞·ª£t qu√° 400g.
              </p>
              <p>
                T·ª´ s·ªë l∆∞·ª£ng ng∆∞·ªùi ƒÉn c·ªßa t·ª´ng ƒë∆°n v·ªã nhu c·∫ßu s·∫Ω b·∫±ng ƒë·ªãnh l∆∞·ª£ng nh√¢n v·ªõi s·ªë ng∆∞·ªùi v√† ƒë√¢y c≈©ng l√† s·ªë l∆∞·ª£ng c·∫•p cho c√°c ƒë∆°n v·ªã 
                ƒë·ªÉ c√°c ƒë∆°n v·ªã ch·∫ø bi·∫øn n·∫•u ƒÉn theo th·ª±c ƒë∆°n.
              </p>
              
              {/* Category Limits Status */}
              <div className="mt-4">
                <h4 className="font-medium mb-2">Tr·∫°ng th√°i ƒë·ªãnh m·ª©c theo ph√¢n lo·∫°i:</h4>
                <div className="grid grid-cols-2 md:grid-cols-3 gap-2">
                  {Object.entries(categoryTotals).map(([category, data]) => (
                    <div key={category} className="flex items-center gap-2">
                      <Badge variant={data.total > data.limit ? "destructive" : "default"}>
                        {category}
                      </Badge>
                      <span className="text-xs">
                        {(data.total * 1000).toFixed(0)}g/{(data.limit * 1000).toFixed(0)}g
                      </span>
                      {data.total > data.limit && (
                        <span className="text-xs text-red-600">V∆∞·ª£t m·ª©c!</span>
                      )}
                    </div>
                  ))}
                    </div>
                  </div>
                  </div>
              </CardContent>
            </Card>

        {/* Edit Personnel Dialog */}
        <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>
          <DialogContent>
            <DialogHeader>
              <DialogTitle>Ch·ªânh s·ª≠a s·ªë ng∆∞·ªùi ƒÉn</DialogTitle>
              <DialogDescription>
                C·∫≠p nh·∫≠t s·ªë ng∆∞·ªùi ƒÉn cho {editingUnit?.unitName}
              </DialogDescription>
            </DialogHeader>
            <div className="space-y-4">
              <div>
                <label className="text-sm font-medium">S·ªë ng∆∞·ªùi ƒÉn hi·ªán t·∫°i:</label>
                <Input
                  type="number"
                  value={newPersonnelCount}
                  onChange={(e) => setNewPersonnelCount(parseInt(e.target.value) || 0)}
                  min="0"
                  className="mt-1"
                />
              </div>
            </div>
            <DialogFooter>
              <Button variant="outline" onClick={() => setIsEditDialogOpen(false)}>
                H·ªßy
              </Button>
              <Button onClick={handleSavePersonnelCount}>
                L∆∞u
              </Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>
      </div>
    </div>
  )
}
