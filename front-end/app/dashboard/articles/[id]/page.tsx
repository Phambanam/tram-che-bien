"use client"

import { useState, useEffect } from "react"
import { useRouter } from "next/navigation"
import { Button } from "@/components/ui/button"
import { Card } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { ArrowLeft, Calendar, User, Edit, Trash2, Home } from "lucide-react"
import { ArticleDialog } from "@/components/articles/article-dialog"
import { DeleteArticleDialog } from "@/components/articles/delete-article-dialog"
import { contentApi } from "@/lib/api-client"
import { useToast } from "@/components/ui/use-toast"
import ReactMarkdown from "react-markdown"
import "@/styles/markdown.css"

interface Article {
  id: string
  title: string
  content: string
  type: "article" | "image" | "video"
  imageUrl?: string
  videoUrl?: string
  author: string
  createdAt: string
  status: "published" | "draft"
}

export default function ArticleDetailPage({ params }: { params: { id: string } }) {
  const router = useRouter()
  const { toast } = useToast()
  const [article, setArticle] = useState<Article | null>(null)
  const [isLoading, setIsLoading] = useState(true)
  const [isArticleDialogOpen, setIsArticleDialogOpen] = useState(false)
  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false)

  useEffect(() => {
    const fetchArticle = async () => {
      try {
        const data = await contentApi.getContentById(params.id)
        setArticle(data)
      } catch (error) {
        console.error("Error fetching article:", error)
        toast({
          title: "L·ªói",
          description: "Kh√¥ng th·ªÉ t·∫£i th√¥ng tin b√†i vi·∫øt. Vui l√≤ng th·ª≠ l·∫°i sau.",
          variant: "destructive",
        })
        // Fallback to mock data
        setArticle({
          id: params.id,
          title: "L·ªØ ƒëo√†n 279 ƒë·∫°t th√†nh t√≠ch xu·∫•t s·∫Øc trong hu·∫•n luy·ªán",
          content: `Trong th√°ng v·ª´a qua, L·ªØ ƒëo√†n 279 ƒë√£ ho√†n th√†nh xu·∫•t s·∫Øc c√°c nhi·ªám v·ª• hu·∫•n luy·ªán ƒë∆∞·ª£c giao. C√°c ƒë∆°n v·ªã trong L·ªØ ƒëo√†n ƒë√£ t√≠ch c·ª±c tham gia c√°c ho·∫°t ƒë·ªông hu·∫•n luy·ªán, n√¢ng cao tr√¨nh ƒë·ªô chi·∫øn ƒë·∫•u v√† s·∫µn s√†ng th·ª±c hi·ªán nhi·ªám v·ª• khi ƒë∆∞·ª£c giao.
          
          ƒê·∫∑c bi·ªát, Ti·ªÉu ƒëo√†n 1 ƒë√£ ƒë·∫°t ƒë∆∞·ª£c k·∫øt qu·∫£ xu·∫•t s·∫Øc trong cu·ªôc thi b·∫Øn s√∫ng to√†n qu√¢n, v·ªõi nhi·ªÅu chi·∫øn sƒ© ƒë·∫°t danh hi·ªáu x·∫° th·ªß xu·∫•t s·∫Øc. Ti·ªÉu ƒëo√†n 2 c≈©ng ƒë√£ ho√†n th√†nh t·ªët c√°c b√†i t·∫≠p chi·∫øn thu·∫≠t ph·ª©c t·∫°p trong ƒëi·ªÅu ki·ªán ƒë·ªãa h√¨nh kh√≥ khƒÉn.
          
          Th√†nh t√≠ch n√†y l√† k·∫øt qu·∫£ c·ªßa s·ª± n·ªó l·ª±c kh√¥ng ng·ª´ng c·ªßa to√†n th·ªÉ c√°n b·ªô, chi·∫øn sƒ© trong L·ªØ ƒëo√†n, c≈©ng nh∆∞ s·ª± quan t√¢m, ch·ªâ ƒë·∫°o s√°t sao c·ªßa Ban ch·ªâ huy L·ªØ ƒëo√†n v√† c·∫•p tr√™n.`,
          type: "article",
          imageUrl: "/placeholder.svg?height=400&width=600",
          author: "Thi·∫øu t√° Nguy·ªÖn VƒÉn A",
          createdAt: "2024-01-15",
          status: "published",
        })
      } finally {
        setIsLoading(false)
      }
    }

    fetchArticle()
  }, [params.id, toast])

  const handleEditArticle = () => {
    setIsArticleDialogOpen(true)
  }

  const handleDeleteArticle = () => {
    setIsDeleteDialogOpen(true)
  }

  const handleSaveArticle = async (articleData: Partial<Article>) => {
    try {
      if (article) {
        await contentApi.updateContent(article.id, articleData)
        setArticle({ ...article, ...articleData })
        toast({
          title: "Th√†nh c√¥ng",
          description: "C·∫≠p nh·∫≠t b√†i vi·∫øt th√†nh c√¥ng",
        })
      }
    } catch (error) {
      console.error("Error updating article:", error)
      toast({
        title: "L·ªói",
        description: "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t b√†i vi·∫øt. Vui l√≤ng th·ª≠ l·∫°i sau.",
        variant: "destructive",
      })
    }
    setIsArticleDialogOpen(false)
  }

  const handleConfirmDelete = async () => {
    try {
      if (article) {
        await contentApi.deleteContent(article.id)
        toast({
          title: "Th√†nh c√¥ng",
          description: "X√≥a b√†i vi·∫øt th√†nh c√¥ng",
        })
        router.push("/dashboard")
      }
    } catch (error) {
      console.error("Error deleting article:", error)
      toast({
        title: "L·ªói",
        description: "Kh√¥ng th·ªÉ x√≥a b√†i vi·∫øt. Vui l√≤ng th·ª≠ l·∫°i sau.",
        variant: "destructive",
      })
    }
    setIsDeleteDialogOpen(false)
  }

  const getTypeIcon = (type: string) => {
    switch (type) {
      case "video":
        return "üé•"
      case "image":
        return "üñºÔ∏è"
      default:
        return "üìÑ"
    }
  }

  if (isLoading) {
    return (
      <div className="container py-8">
        <div className="animate-pulse">
          <div className="h-8 bg-gray-200 rounded w-1/3 mb-6"></div>
          <div className="h-64 bg-gray-200 rounded mb-6"></div>
          <div className="h-4 bg-gray-200 rounded mb-2"></div>
          <div className="h-4 bg-gray-200 rounded mb-2"></div>
          <div className="h-4 bg-gray-200 rounded mb-2"></div>
        </div>
      </div>
    )
  }

  if (!article) {
    return (
      <div className="container py-8">
        <Card className="p-6">
          <div className="text-center">
            <h2 className="text-2xl font-bold mb-4">Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt</h2>
            <p className="mb-6">B√†i vi·∫øt n√†y c√≥ th·ªÉ ƒë√£ b·ªã x√≥a ho·∫∑c kh√¥ng t·ªìn t·∫°i.</p>
            <Button onClick={() => router.push("/dashboard")}>
              <Home className="mr-2 h-4 w-4" />
              V·ªÅ trang ch·ªß
            </Button>
          </div>
        </Card>
      </div>
    )
  }

  return (
    <div className="container py-8">
      {/* Breadcrumb */}
      <nav className="flex items-center space-x-2 text-sm text-gray-600 mb-4">
        <button 
          onClick={() => router.push("/dashboard")} 
          className="hover:text-blue-600 flex items-center gap-1"
        >
          <Home className="h-4 w-4" />
          Trang ch·ªß
        </button>
        <span>/</span>
        <span className="text-gray-800 font-medium">Chi ti·∫øt b√†i vi·∫øt</span>
      </nav>
      
      <div className="flex items-center justify-between mb-6">
        <Button variant="outline" onClick={() => router.push("/dashboard")}>
          <ArrowLeft className="mr-2 h-4 w-4" />
          V·ªÅ trang ch·ªß
        </Button>
        <div className="flex gap-2">
          <Button variant="outline" onClick={handleEditArticle}>
            <Edit className="mr-2 h-4 w-4" />
            Ch·ªânh s·ª≠a
          </Button>
          <Button variant="outline" className="text-red-600" onClick={handleDeleteArticle}>
            <Trash2 className="mr-2 h-4 w-4" />
            X√≥a
          </Button>
        </div>
      </div>

      <Card className="p-6">
        <div className="mb-6">
          <div className="flex justify-between items-start mb-4">
            <Badge variant={article.status === "published" ? "default" : "secondary"}>
              {getTypeIcon(article.type)}{" "}
              {article.type === "article" ? "B√†i vi·∫øt" : article.type === "video" ? "Video" : "H√¨nh ·∫£nh"}
            </Badge>
            <div className="flex items-center gap-4 text-sm text-gray-500">
              <div className="flex items-center gap-1">
                <User className="h-4 w-4" />
                <span>{article.author}</span>
              </div>
              <div className="flex items-center gap-1">
                <Calendar className="h-4 w-4" />
                <span>{new Date(article.createdAt).toLocaleDateString("vi-VN")}</span>
              </div>
            </div>
          </div>
          <h1 className="text-3xl font-bold mb-4">{article.title}</h1>
        </div>

        {article.imageUrl && (
          <div className="mb-6">
            <img
              src={article.imageUrl || "/placeholder.svg"}
              alt={article.title}
              className="w-full max-h-[400px] object-cover rounded-lg"
            />
          </div>
        )}

        {article.videoUrl && (
          <div className="mb-6 aspect-video bg-gray-200 rounded-lg flex items-center justify-center">
            <div className="text-center">
              <div className="text-6xl mb-2">üé•</div>
              <p className="text-gray-600">Video URL: {article.videoUrl}</p>
            </div>
          </div>
        )}

        <div className="prose max-w-none">
          <ReactMarkdown className="markdown-content">
            {article.content}
          </ReactMarkdown>
        </div>
      </Card>

      <ArticleDialog
        article={article}
        open={isArticleDialogOpen}
        onOpenChange={setIsArticleDialogOpen}
        onSave={handleSaveArticle}
      />

      <DeleteArticleDialog
        article={article}
        open={isDeleteDialogOpen}
        onOpenChange={setIsDeleteDialogOpen}
        onConfirm={handleConfirmDelete}
      />
    </div>
  )
}
